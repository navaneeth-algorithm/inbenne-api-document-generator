{"version":3,"sources":["components/navbar.js","pages/api-documentation.js","pages/normal-documentation.js","pages/preview-document.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","Navbar","bg","expand","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","to","ApiDocumentation","fileReader","useState","formData","setFormData","isError","msg","isNewFile","setFileType","fileExtensionError","setExtensionError","status","successdata","errordata","successstatuscode","errorstatuscode","responseStatus","setResponseStatus","setResponseStatusCode","selectedRequestMethod","setRequestMethod","apiPath","setApiPath","requestbody","setRequestBody","setResponseBody","apiDocumentHistory","setApiDocmentHistory","codeTypeRaw","setCodeType","fileString","setFileString","handleFileRead","e","content","result","useEffect","console","log","navigate","useNavigate","onSetForm","field","value","validateFile","target","files","file","ext","String","name","split","pop","includes","FileReader","onloadend","readAsText","Row","Col","lg","Form","Group","Check","onChange","inline","type","label","defaultChecked","Control","size","isInvalid","Feedback","Button","onClick","state","placeholder","Label","Select","map","i","key","style","height","markdowndocument","length","concat","join","overflow","whiteSpace","dangerouslySetInnerHTML","__html","marked","NormalDocumentation","PreviewDocument","location","useLocation","App","path","element","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ab655f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport {Container, Navbar,NavDropdown,Nav} from 'react-bootstrap';\r\nconst NavBar = ()=>{\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n            <Container>\r\n            <Navbar.Brand href=\"/\">Document Generator</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"me-auto\">\r\n                <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n                <Nav.Link as={Link} to=\"/normal-documentation\">Normal Documentation</Nav.Link>\r\n                <Nav.Link as={Link} to=\"/api-documentation\">API Documentation</Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n            </Container>\r\n\r\n            </Navbar>\r\n\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;","\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Form, FormControl, Button } from \"react-bootstrap\";\r\nimport { useState,useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { marked } from \"marked\";\r\nexport default function ApiDocumentation() {\r\n\r\n    let [formData, setFormData] = useState({})\r\n    let [errorState, setErrorState] = useState({ isError: false, msg: '' })\r\n    let [isNewFile, setFileType] = useState(true);\r\n    let [fileExtensionError, setExtensionError] = useState(false)\r\n    let [responseStatus, setResponseStatus] = useState({ status: \"Success\", successdata: \"\", errordata: \"\", successstatuscode: \"HTTP 200 OK\", errorstatuscode: \"HTTP 500 Internal Server Error\" })\r\n    let [responseStatusCode, setResponseStatusCode] = useState(\"HTTP 200 OK\")\r\n    let [selectedRequestMethod, setRequestMethod] = useState(\"GET\")\r\n    let [apiPath, setApiPath] = useState(\"\")\r\n    let [requestbody, setRequestBody] = useState(\"\")\r\n    let [responsebody, setResponseBody] = useState(\"\")\r\n    let [apiDocumentHistory,setApiDocmentHistory]= useState(\"\")\r\n    let [codeTypeRaw,setCodeType] = useState(false)\r\n    let fileReader;\r\n\r\n    const [fileString, setFileString] = useState(\"\");\r\n    const handleFileRead = (e) => {\r\n        const content = fileReader.result;\r\n        setFileString(content);\r\n    }\r\n    const handleFileChosen = (file) => {\r\n        fileReader = new FileReader();\r\n        fileReader.onloadend = handleFileRead;\r\n        fileReader.readAsText(file);\r\n    }\r\n    useEffect(()=>{\r\n        console.log(apiDocumentHistory)\r\n        setFileString(apiDocumentHistory);\r\n    },[apiDocumentHistory])\r\n    const onSubmitButton = () => {\r\n        let apipathformat = `\\n### **${apiPath}**`;\r\n        let methodstatusformat = `* ### **Method**:${selectedRequestMethod}`;\r\n        let requestbodyformat = requestbody.length==0?\"\":`    * ### **Request body**\\n    * \\`\\`\\`javascript\\n      ${requestbody}\\n      \\`\\`\\``;\r\n        let responsesuccessstatuscodeformat = `* ### **success response**\\n    * **Statuts:${responseStatus.successstatuscode}**`;\r\n        let successresponse = `   * \\`\\`\\`javascript\\n        ${responseStatus.successdata}\\n       \\`\\`\\``;\r\n        let responseerrorstatusodeformat = `* ### **error Response**\\n    * **Status:${responseStatus.errorstatuscode}**`;\r\n        let errorresponse = `    * \\`\\`\\`javascript\\n        ${responseStatus.errordata}\\n      \\`\\`\\``;\r\n        //console.log(requestbodyformat)\r\n        let markdowndocument = [\r\n            apipathformat,methodstatusformat,\r\n            requestbodyformat,\r\n            responsesuccessstatuscodeformat,\r\n            successresponse,responseerrorstatusodeformat,errorresponse]\r\n            \r\n        setApiDocmentHistory(apiDocumentHistory.concat(markdowndocument.join(\"\\n\")))\r\n        \r\n        \r\n    }\r\n    const statusList = [\"HTTP 200 OK\",\r\n        \"HTTP 201 Created\",\r\n        \"HTTP 202 Accepted\",\r\n        \"HTTP 204 No Content\",\r\n        \"HTTP 304 Not Modified\",\r\n        \"HTTP 307 Temporary Redirect\",\r\n        \"HTTP 308 Permanent Redirect\",\r\n        \"HTTP 400 Bad Request\",\r\n        \"HTTP 401 Unauthorized\",\r\n        \"HTTP 403 Forbidden\",\r\n        \"HTTP 404 Not Found\",\r\n        \"HTTP 405 Method Not Allowed\",\r\n        \"HTTP 409 Conflict\",\r\n        \"HTTP 500 Internal Server Error\"\r\n    ]\r\n    const navigate = useNavigate();\r\n    const onSetForm = (field, value) => {\r\n        setFormData({\r\n            ...formData, [field]: value\r\n        })\r\n    }\r\n\r\n    const validateFile = (e) => {\r\n        console.log(e.target.files[0]);\r\n        const ext = new String(e.target.files[0].name).split(\".\").pop();\r\n        if (ext) {\r\n\r\n            if (!ext.includes(\"md\")) {\r\n                setExtensionError(true);\r\n            }\r\n            else {\r\n                handleFileChosen(e.target.files[0]);\r\n                setFormData({ ...formData, 'file': e.target.files[0] })\r\n                setExtensionError(false);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <Container>\r\n                        Here API documentation parameter\r\n                        <Form>\r\n                            <Form.Group>\r\n                                <Form.Check onChange={\r\n                                    (e) => {\r\n                                        onSetForm('filetype', e.target.value)\r\n                                        setFileType(e.target.value == \"new file\" ? true : false);\r\n                                    }} inline type=\"radio\" name=\"file-type\" label=\"New File\" id=\"new-file\" value=\"new file\" defaultChecked />\r\n                                <Form.Check onChange={(e) => {\r\n                                    onSetForm('filetype', e.target.value);\r\n                                    setFileType(e.target.value == \"new file\" ? true : false);\r\n                                }} inline type=\"radio\" name=\"file-type\" label=\"Existing file\" id=\"new-file\" value=\"existing\" />\r\n                            </Form.Group>\r\n\r\n                            {!isNewFile &&\r\n                                <Row>\r\n                                    <Col><Form.Group>\r\n                                        <Form.Control size=\"sm\" onChange={\r\n\r\n                                            (e) => {\r\n                                                onSetForm('file', e.target.files[0]);\r\n                                                validateFile(e);\r\n                                            }} type=\"file\" id=\"file-upload\" label=\"upload a file\" isInvalid={fileExtensionError} />\r\n                                        <Form.Control.Feedback type=\"invalid\">Select .md file</Form.Control.Feedback>\r\n\r\n                                    </Form.Group></Col>\r\n                                    <Col>{formData.file && !fileExtensionError &&\r\n                                        <Button onClick={() => {\r\n                                            navigate('/preview-document', { state: { file: formData.file } })\r\n                                        }} size=\"sm\">Preview File</Button>\r\n                                    }</Col>\r\n                                </Row>\r\n                            }\r\n                            <p></p>\r\n                            {!isNewFile && formData.file && !fileExtensionError &&\r\n                                <div>\r\n                                    <Form.Group>\r\n                                        <Form.Control id=\"apipath\" onChange={(e) => {\r\n                                            setApiPath(e.target.value);\r\n                                        }} type=\"text\" placeholder=\"API path\" />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>METHOD</Form.Label>\r\n                                        <Form.Select onChange={(e) => {\r\n                                            setRequestMethod(e.target.value);\r\n                                        }}>\r\n                                            <option value=\"GET\">GET</option>\r\n                                            <option value=\"POST\">POST</option>\r\n                                            <option value=\"PUT\">PUT</option>\r\n                                            <option value=\"UPDATE\">UPDATE</option>\r\n                                            <option value=\"DELETE\">DELETE</option>\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Response Status</Form.Label>\r\n                                        <Form.Select onChange={\r\n\r\n                                            (e) => {\r\n                                                setResponseStatus({ ...responseStatus, [\"status\"]: e.target.value });\r\n                                            }\r\n                                        }>\r\n                                            <option value=\"Success\">Success</option>\r\n                                            <option value=\"Failure\">Failure</option>\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Status</Form.Label>\r\n                                        <Form.Select value={responseStatus.status === \"Success\" ? responseStatus.successstatuscode : responseStatus.errorstatuscode} onChange={(e) => {\r\n                                            if (responseStatus.status === \"Success\") {\r\n                                                responseStatus.successstatuscode = e.target.value;\r\n                                            }\r\n                                            else {\r\n                                                responseStatus.errorstatuscode = e.target.value;\r\n                                            }\r\n                                            setResponseStatusCode(e.target.value);\r\n                                        }}>\r\n                                            {statusList.map((i) => {\r\n                                                return <option key={i} value={i}>{i}</option>\r\n                                            })}\r\n\r\n                                        </Form.Select>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Request in JSON format</Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"textarea\"\r\n                                            id=\"request-data\"\r\n                                            onChange={(e) => {\r\n                                                setRequestBody(e.target.value);\r\n                                            }}\r\n                                            placeholder=\"Request here\"\r\n                                            style={{ height: '100px' }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <p></p>\r\n                                    <Form.Group>\r\n                                        <Form.Label>{responseStatus.status} Response in JSON format</Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"textarea\"\r\n                                            id=\"response-data\"\r\n                                            onChange={(e) => {\r\n                                                if (responseStatus.status === \"Success\") {\r\n                                                    responseStatus.successdata = e.target.value;\r\n                                                }\r\n                                                else {\r\n                                                    responseStatus.errordata = e.target.value;\r\n                                                }\r\n                                                setResponseBody(e.target.value);\r\n                                            }}\r\n                                            value={\r\n                                                responseStatus.status === \"Success\" ? responseStatus.successdata : responseStatus.errordata\r\n                                            }\r\n                                            placeholder=\"Response here\"\r\n                                            style={{ height: '100px' }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <p></p>\r\n                                    <Form.Group>\r\n                                        <Button onClick={onSubmitButton}>ADD</Button>\r\n                                    </Form.Group>\r\n                                </div>\r\n\r\n\r\n\r\n\r\n                            }\r\n                        </Form>\r\n\r\n                    </Container>\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <Container style={{ height: '500px', overflow: 'scroll' }}>\r\n                        API Documentation\r\n                        <Form>\r\n                            <Form.Group>\r\n                                <Form.Check onChange={(e)=>{\r\n                                   setCodeType(e.target.value==\"raw\"?true:false);\r\n                                }} inline type=\"radio\" name=\"codetype\" label=\"Markdown\" value=\"markdown\" defaultChecked/>\r\n                                <Form.Check onChange={(e)=>{\r\n                                   setCodeType(e.target.value==\"raw\"?true:false);\r\n                                }} inline type=\"radio\" name=\"codetype\" label=\"Raw\" value=\"raw\"/>\r\n                            </Form.Group>\r\n                        </Form>\r\n                        \r\n                        {codeTypeRaw && <div style={{whiteSpace:\"pre-wrap\"}} dangerouslySetInnerHTML={{ __html: fileString }}>\r\n                        </div>}\r\n\r\n                        {!codeTypeRaw && <div dangerouslySetInnerHTML={{ __html: marked(fileString) }}>\r\n                        </div>}\r\n                        \r\n\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nexport default function NormalDocumentation(){\r\n    return (\r\n        <div>\r\n            <Container>\r\n            Normal Documentation\r\n            </Container>\r\n           \r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { marked } from \"marked\";\r\nimport { Container } from \"react-bootstrap\";\r\nconst PreviewDocument = () => {\r\n    const location = useLocation();\r\n    let fileReader;\r\n\r\n    const [fileString, setFileString] = useState(\"\");\r\n    const handleFileRead = (e) => {\r\n        const content = fileReader.result;\r\n        setFileString(content);\r\n    }\r\n    const handleFileChosen = (file) => {\r\n        fileReader = new FileReader();\r\n        fileReader.onloadend = handleFileRead;\r\n        fileReader.readAsText(file);\r\n    }\r\n    useEffect(() => {\r\n        handleFileChosen(location.state.file);\r\n    }, [])\r\n\r\n    return (\r\n        <Container><div dangerouslySetInnerHTML={{ __html: marked(fileString) }}>\r\n\r\n        </div></Container>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default PreviewDocument;","import React from \"react\";\nimport { BrowserRouter as Router,Route,Routes } from \"react-router-dom\";\nimport NavBar from \"./components/navbar\";\nimport ApiDocumentation from \"./pages/api-documentation\";\nimport NormalDocumentation from \"./pages/normal-documentation\";\nimport PreviewDocument from \"./pages/preview-document\";\nexport default class App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Router>\n        <NavBar />\n        <Routes>\n          <Route path=\"/api-documentation\"  element={<ApiDocumentation/>}/>\n          <Route path=\"/normal-documentation\"  element={<NormalDocumentation/>}/>\n          <Route path=\"/preview-document\"  element={<PreviewDocument/>}/>\n        </Routes>\n          \n        </Router>\n       \n      </div>\n    );\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}